[tox]
envlist = py27, py34, py36

[testenv]
deps =
  coverage
  pytest
  pytest-cov

setenv =
  PACKAGE_NAME = my_library

recreate = {env:TOX_RECREATE:False}

commands =
  pip install -r {toxinidir}/requirements_dev.txt
  pip install -r {toxinidir}/{env:TOX_REQUIREMENTS_FILE:requirements.txt}
  coverage run --source {env:PACKAGE_NAME:} -m py.test {posargs}
  coverage report


[testenv:update_requirements]

# How this works:
#   This environment runs the default ``tox`` invocation (testing the
#   environments specified in ``envlist`` above), passing the environmnt
#   variables necessary to trigger recreation of the test environment
#   and installation of ``requireemnts_unfrozen.txt`` rather than
#   ``requirements.txt``. Because the environment is fresh, the most
#   recent packages allowed by ``requirements_unfrozen.txt`` will be
#   installed. If tests succeed with these requirements, the tox command
#   is run again using the ``freeze_requirements`` environment, which
#   again creates a fresh virtual environment and installs packages from
#   ``requirements_unfrozen.txt``. The current environment is then frozen
#   and output to ``requirements.txt``.

whitelist_externals =
  tox

setenv =
  TOX_REQUIREMENTS_FILE=requirements_unfrozen.txt
  TOX_RECREATE=True

passenv =
  TOX_REQUIREMENTS_FILE
  TOX_RECREATE

commands =
  # Run standard test flow with updated packages
  tox
  # If it succeeds, freeze requirements
  tox -e _freeze_requirements


[testenv:_freeze_requirements]

# This environment is prefixed with an underscore to indicate that it is
# not really intended to be run directly by the developer. Instead,
# run ``tox -e update_requirements``.

recreate = True

whitelist_externals =
  {toxinidir}/tools/freeze_requirements.py

commands =
  pip install -r requirements_unfrozen.txt
  {toxinidir}/tools/freeze_requirements.py
